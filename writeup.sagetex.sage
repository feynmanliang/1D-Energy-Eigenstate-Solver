## -*- encoding: utf-8 -*-
## This file (writeup.sagetex.sage) was *autogenerated* from writeup.tex with sagetex.sty version 2012/01/16 v2.3.3-69dcb0eb93de.
import sagetex
_st_ = sagetex.SageTeXProcessor('writeup', version='2012/01/16 v2.3.3-69dcb0eb93de', version_check=True)
_st_.blockbegin()
try:
     V_potential = lambda u: 1 if (abs(u) > 1/2) else 0
     beta = 64
except:
 _st_.goboom(62)
_st_.blockend()
_st_.blockbegin()
try:
 def shooting_solver_finite_well(psi0, dpsi0, uf, epsilon, delta_u):
     num_steps = (uf - 0) / delta_u
     data = [(0, psi0, dpsi0)] # initialize data array
     for i in range(num_steps): # perform forward euler
         u_old = data[i][0]
         psi_old = data[i][1]
         dpsi_old = data[i][2]
         u = u_old + delta_u
         # Taylor approximations given by (3) and (4)
         dpsi = dpsi_old - delta_u * beta \
                * (epsilon - V_potential(u_old)) * psi_old
         psi = psi_old + delta_u * dpsi_old
         data.append((u, psi, dpsi))
     return map(lambda x: (x[0], x[1]), data) # return list of (u, psi) tuples
except:
 _st_.goboom(95)
_st_.blockend()
_st_.blockbegin()
try:
 import matplotlib.pyplot as plt # use matplotlib
 def plot_data(data, n, title):
     # mirror data based on parity, assumes eigenfunction
     # has a definite parity
     (u, psi0) = data[0]
     if psi0 == 0: # node at 0, odd
         data = map(lambda x: (-x[0], -x[1]), data)[::-1] + data
     else: # definite parity => anti-node at 0, even
         data = map(lambda x: (-x[0], x[1]), data)[::-1] + data
 
     u, psi = [[x[i] for x in data] for i in (0,1)]
     fig = plt.figure()
     plt.plot(u, psi)
     plt.title(title)
     plt.xlabel('$u$')
     plt.ylabel("$\\psi_{%s}(u)$" % n)
     plt.axvline(x=0, color='black')
     plt.axvline(x=0.5, linestyle='dashed', color='black')
     plt.axvline(x=-0.5, linestyle='dashed', color='black')
     plt.grid(True)
 
     # plt.savefig
     # uncomment if plotting from sagetex
     plt.save = plt.savefig
     return plt
except:
 _st_.goboom(133)
_st_.blockend()
_st_.blockbegin()
try:
 plot_data(shooting_solver_finite_well(1, 0, 1.5, .01, 0.0001), \
           n=1, title="Ground Energy Eigenfunction")
except:
 _st_.goboom(147)
_st_.blockend()
try:
 _st_.plot(0, format='notprovided', _p_=plot_data(shooting_solver_finite_well(1, 0, 1.5, .01, 0.0001), n=1, title="Ground Energy Eigenfunction"))
except:
 _st_.goboom(149)
_st_.blockbegin()
try:
 plot_data(shooting_solver_finite_well(1, 0, 1.5, .09, 0.0001), \
           n=1, title="Ground Energy Eigenfunction")
except:
 _st_.goboom(155)
_st_.blockend()
try:
 _st_.plot(1, format='notprovided', _p_=plot_data(shooting_solver_finite_well(1, 0, 1.5, .09, 0.0001), n=1, title="Ground Energy Eigenfunction"))
except:
 _st_.goboom(157)
_st_.blockbegin()
try:
 plot_data(shooting_solver_finite_well(1, 0, 1.5, .095, 0.0001), \
           n=1, title="Ground Energy Eigenfunction")
except:
 _st_.goboom(163)
_st_.blockend()
try:
 _st_.plot(2, format='notprovided', _p_=plot_data(shooting_solver_finite_well(1, 0, 1.5, .095, 0.0001), n=1, title="Ground Energy Eigenfunction"))
except:
 _st_.goboom(165)
_st_.blockbegin()
try:
 plot_data(shooting_solver_finite_well(1, 0, 1.5, .0975, 0.0001), \
           n=1, title="Ground Energy Eigenfunction")
except:
 _st_.goboom(171)
_st_.blockend()
try:
 _st_.plot(3, format='notprovided', _p_=plot_data(shooting_solver_finite_well(1, 0, 1.5, .0975, 0.0001), n=1, title="Ground Energy Eigenfunction"))
except:
 _st_.goboom(173)
_st_.blockbegin()
try:
 plot_data(shooting_solver_finite_well(1, 0, 1.5, .098, 0.0001), \
           n=1, title="Ground Energy Eigenfunction")
except:
 _st_.goboom(179)
_st_.blockend()
try:
 _st_.plot(4, format='notprovided', _p_=plot_data(shooting_solver_finite_well(1, 0, 1.5, .098, 0.0001), n=1, title="Ground Energy Eigenfunction"))
except:
 _st_.goboom(181)
_st_.blockbegin()
try:
 plot_data(shooting_solver_finite_well(1, 0, 1.5, .097993, 0.0001), \
           n=1, title="Ground Energy Eigenfunction")
except:
 _st_.goboom(187)
_st_.blockend()
try:
 _st_.plot(5, format='notprovided', _p_=plot_data(shooting_solver_finite_well(1, 0, 1.5, .097993, 0.0001), n=1, title="Ground Energy Eigenfunction"))
except:
 _st_.goboom(189)
_st_.blockbegin()
try:
     plot_data(shooting_solver_finite_well(0, 1, 2, .382605, 0.0001), \
               n=2, title="1st Excited Energy Eigenfunction")
except:
 _st_.goboom(204)
_st_.blockend()
try:
 _st_.plot(6, format='notprovided', _p_=plot_data(shooting_solver_finite_well(0, 1, 2, .382605, 0.0001), n=2, title="1st Excited Energy Eigenfunction"))
except:
 _st_.goboom(206)
_st_.blockbegin()
try:
     plot_data(shooting_solver_finite_well(-1, 0, 2, .80767, 0.0001), \
               n=3, title="2nd Excited Energy Eigenfunction")
except:
 _st_.goboom(214)
_st_.blockend()
try:
 _st_.plot(7, format='notprovided', _p_=plot_data(shooting_solver_finite_well(1, 0, 2, .80767, 0.0001), n=3, title="2nd Excited Energy Eigenfunction"))
except:
 _st_.goboom(216)
_st_.blockbegin()
try:
     plot_data(shooting_solver_finite_well(-1, 0, 5, 3, 0.0001), \
               n=3, title="Unbound Energy")
except:
 _st_.goboom(229)
_st_.blockend()
try:
 _st_.plot(8, format='notprovided', _p_=plot_data(shooting_solver_finite_well(-1, 0, 5, 3, 0.0001), n="unbound", title="Unbound Energy Eigenfunction"))
except:
 _st_.goboom(231)
_st_.blockbegin()
try:
     plot_data(shooting_solver_finite_well(-1, 0, 5, 3, 0.01), \
               n=3, title="Unbound Energy")
except:
 _st_.goboom(250)
_st_.blockend()
try:
 _st_.plot(9, format='notprovided', _p_=plot_data(shooting_solver_finite_well(-1, 0, 5, 3, 0.01), n="unbound", title="Energy gain due to low step size"))
except:
 _st_.goboom(252)
_st_.blockbegin()
try:
 # 999 to approximate infinite potential
 V_potential = lambda u: 999 * int(abs(u) > 1/2)
except:
 _st_.goboom(262)
_st_.blockend()
_st_.blockbegin()
try:
     plot_data(shooting_solver_finite_well(1, 0, 0.5, .1542, 0.0001), \
               n=1, title="Ground Energy Eigenfunction, \
               $\infty$-quantum well")
except:
 _st_.goboom(271)
_st_.blockend()
try:
 _st_.plot(10, format='notprovided', _p_=plot_data(shooting_solver_finite_well(1, 0, 0.5, .1542, 0.0001), n=1, title="Ground Energy Eigenfunction, $\infty $-quantum well"))
except:
 _st_.goboom(273)
_st_.blockbegin()
try:
     plot_data(shooting_solver_finite_well(0, 1, 0.5, 0.6179, 0.0001), \
               n=2, title="First Exctited Energy Eigenfunction, \
               $\infty$-quantum well")
except:
 _st_.goboom(280)
_st_.blockend()
try:
 _st_.plot(11, format='notprovided', _p_=plot_data(shooting_solver_finite_well(0, 1, 0.5, 0.6179, 0.0001), n=2, title="First Excited Energy Eigenfunction, $\infty $-quantum well"))
except:
 _st_.goboom(282)
_st_.blockbegin()
try:
 hbar = 6.58211928*10**-16 # eV s
 C = 1
 m = 1
 
 omega = sqrt(C / m)
 x0 = sqrt(hbar / (m * omega))
 
 V_potential = lambda u: C * (u * x0)**2 / 2
 
 
 def shooting_solver_qho(psi0, dpsi0, uf, epsilon, delta_u):
     num_steps = (uf - 0) / delta_u
     data = [(0, psi0, dpsi0)];
     for i in range(num_steps):
         u_old = data[i][0]
         psi_old = data[i][1]
         dpsi_old = data[i][2]
         u = u_old + delta_u
         dpsi = dpsi_old - delta_u * (epsilon - u**2) * psi_old
         psi = psi_old + delta_u * dpsi_old
         data.append((u, psi, dpsi))
     return map(lambda x: (x[0], x[1]), data)
 
 def plot_data_qho(data, n, title):
     # mirror data based on parity, assumes eigenfunction
     # has a definite parity
     (u, psi0) = data[0]
     if psi0 == 0: # node at 0, odd
         data = map(lambda x: (-x[0], -x[1]), data)[::-1] + data
     else: # definite parity => anti-node at 0, even
         data = map(lambda x: (-x[0], x[1]), data)[::-1] + data
 
     u, psi = [[x[i] for x in data] for i in (0,1)]
     fig = plt.figure()
     plt.plot(u, psi)
     plt.title(title)
     plt.xlabel('$u$')
     plt.ylabel("$\\psi_{%s}(u)$" % n)
     plt.axvline(x=0, color='black')
     plt.grid(True)
 
     # plt.savefig
     # uncomment if plotting from sagetex
     plt.save = plt.savefig
     return plt
except:
 _st_.goboom(339)
_st_.blockend()
_st_.blockbegin()
try:
 plot_data_qho(shooting_solver_qho(1, 0, 3.8, 1.00005, 0.0001), \
               n=1, title="QHO Ground State")
except:
 _st_.goboom(348)
_st_.blockend()
try:
 _st_.plot(12, format='notprovided', _p_=plot_data_qho(shooting_solver_qho(1, 0, 3.9, 1.00005, 0.0001), n=1, title="QHO Ground State"))
except:
 _st_.goboom(350)
_st_.blockbegin()
try:
 plot_data_qho(shooting_solver_qho(0, 1, 3.9, 3, 0.0001), \
               n=2, title="QHO First Excited State")
except:
 _st_.goboom(359)
_st_.blockend()
try:
 _st_.plot(13, format='notprovided', _p_=plot_data_qho(shooting_solver_qho(0, 1, 3.9, 3, 0.0001), n=2, title="QHO First Excited"))
except:
 _st_.goboom(361)
_st_.endofdoc()
