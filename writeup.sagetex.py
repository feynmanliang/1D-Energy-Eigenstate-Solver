## -*- encoding: utf-8 -*-
# This file was *autogenerated* from the file writeup.sagetex.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_202 = Integer(202); _sage_const_189 = Integer(189); _sage_const_209 = Integer(209); _sage_const_262 = Integer(262); _sage_const_265 = Integer(265); _sage_const_182 = Integer(182); _sage_const_478 = Integer(478); _sage_const_467 = Integer(467); _sage_const_323 = Integer(323); _sage_const_0p01 = RealNumber('0.01'); _sage_const_p097993 = RealNumber('.097993'); _sage_const_0p6179 = RealNumber('0.6179'); _sage_const_394 = Integer(394); _sage_const_64 = Integer(64); _sage_const_340 = Integer(340); _sage_const_480 = Integer(480); _sage_const_0p0001 = RealNumber('0.0001'); _sage_const_4 = Integer(4); _sage_const_1p5 = RealNumber('1.5'); _sage_const_68 = Integer(68); _sage_const_297 = Integer(297); _sage_const_p01 = RealNumber('.01'); _sage_const_3p8 = RealNumber('3.8'); _sage_const_172 = Integer(172); _sage_const_0p5 = RealNumber('0.5'); _sage_const_179 = Integer(179); _sage_const_9 = Integer(9); _sage_const_372 = Integer(372); _sage_const_p095 = RealNumber('.095'); _sage_const_192 = Integer(192); _sage_const_212 = Integer(212); _sage_const_8 = Integer(8); _sage_const_458 = Integer(458); _sage_const_12 = Integer(12); _sage_const_219 = Integer(219); _sage_const_199 = Integer(199); _sage_const_250 = Integer(250); _sage_const_p098 = RealNumber('.098'); _sage_const_469 = Integer(469); _sage_const_253 = Integer(253); _sage_const_13 = Integer(13); _sage_const_p09 = RealNumber('.09'); _sage_const_p0975 = RealNumber('.0975'); _sage_const_10 = Integer(10); _sage_const_16 = Integer(16); _sage_const_p382605 = RealNumber('.382605'); _sage_const_320 = Integer(320); _sage_const_6p58211928 = RealNumber('6.58211928'); _sage_const_390 = Integer(390); _sage_const_383 = Integer(383); _sage_const_380 = Integer(380); _sage_const_169 = Integer(169); _sage_const_100 = Integer(100); _sage_const_101 = Integer(101); _sage_const_p1542 = RealNumber('.1542'); _sage_const_11 = Integer(11); _sage_const_p80767 = RealNumber('.80767'); _sage_const_999 = Integer(999); _sage_const_3p9 = RealNumber('3.9'); _sage_const_142 = Integer(142); _sage_const_1p00005 = RealNumber('1.00005'); _sage_const_300 = Integer(300); _sage_const_222 = Integer(222)## This file (writeup.sagetex.sage) was *autogenerated* from writeup.tex with sagetex.sty version 2012/01/16 v2.3.3-69dcb0eb93de.
import sagetex
_st_ = sagetex.SageTeXProcessor('writeup', version='2012/01/16 v2.3.3-69dcb0eb93de', version_check=True)
_st_.blockbegin()
try:
     V_potential = lambda u: _sage_const_1  if (abs(u) > _sage_const_1 /_sage_const_2 ) else _sage_const_0 
     beta = _sage_const_64 
except:
 _st_.goboom(_sage_const_68 )
_st_.blockend()
_st_.blockbegin()
try:
 def shooting_solver_1d_finite(psi0, dpsi0, uf, epsilon, delta_u):
     num_steps = (uf - _sage_const_0 ) / delta_u
     data = [(_sage_const_0 , psi0, dpsi0)] # initialize data array
     for i in range(num_steps): # perform forward euler
         u_old = data[i][_sage_const_0 ]
         psi_old = data[i][_sage_const_1 ]
         dpsi_old = data[i][_sage_const_2 ]
         u = u_old + delta_u
         # Taylor approximations given by (3) and (4)
         dpsi = dpsi_old - delta_u * beta \
                * (epsilon - V_potential(u_old)) * psi_old
         psi = psi_old + delta_u * dpsi_old
         data.append((u, psi, dpsi))
     return map(lambda x: (x[_sage_const_0 ], x[_sage_const_1 ]), data) # return list of (u, psi) tuples
except:
 _st_.goboom(_sage_const_101 )
_st_.blockend()
_st_.blockbegin()
try:
 import matplotlib.pyplot as plt
 def plot_finite_well(data, n, title, chained=False):
     if not chained: plt.clf() # only clear if not part of chained call
     # mirror data across origin, assumes data has a definite parity
     (u, psi0) = data[_sage_const_0 ]
     if psi0 == _sage_const_0 : # node at 0, odd
         data = map(lambda x: (-x[_sage_const_0 ], -x[_sage_const_1 ]), data)[::-_sage_const_1 ] + data
     else: # definite parity => anti-node at 0, even
         data = map(lambda x: (-x[_sage_const_0 ], x[_sage_const_1 ]), data)[::-_sage_const_1 ] + data
 
     u, psi = [[x[i] for x in data] for i in (_sage_const_0 ,_sage_const_1 )]
     plt.plot(u, psi)
     plt.title(title)
     plt.xlabel('$u$')
     plt.ylabel("$\\psi_{%s}(u)$" % n)
     plt.axvline(x=_sage_const_0 , color='black')
     plt.axvline(x=_sage_const_0p5 , linestyle='dashed', color='black')
     plt.axvline(x=-_sage_const_0p5 , linestyle='dashed', color='black')
     plt.grid(True)
     plt.legend()
     plt.save = plt.savefig
     return plt
except:
 _st_.goboom(_sage_const_142 )
_st_.blockend()
_st_.blockbegin()
try:
 plot_finite_well(shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_1p5 , _sage_const_p01 , _sage_const_0p0001 ), \
                       n=_sage_const_1 , title="Guess $\epsilon=0.01$")
except:
 _st_.goboom(_sage_const_169 )
_st_.blockend()
try:
 _st_.plot(_sage_const_0 , format='notprovided', _p_=plot_finite_well(shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_1p5 , _sage_const_p01 , _sage_const_0p0001 ), n=_sage_const_1 , title="Guess $\epsilon =0.01$"))
except:
 _st_.goboom(_sage_const_172 )
_st_.blockbegin()
try:
 plot_finite_well(shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_1p5 , _sage_const_p09 , _sage_const_0p0001 ), \
                       n=_sage_const_1 , title="Guess $\epsilon=0.09$")
except:
 _st_.goboom(_sage_const_179 )
_st_.blockend()
try:
 _st_.plot(_sage_const_1 , format='notprovided', _p_=plot_finite_well(shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_1p5 , _sage_const_p09 , _sage_const_0p0001 ), n=_sage_const_1 , title="Guess $\epsilon =0.09$"))
except:
 _st_.goboom(_sage_const_182 )
_st_.blockbegin()
try:
 plot_finite_well(shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_1p5 , _sage_const_p095 , _sage_const_0p0001 ), \
                       n=_sage_const_1 , title="Guess $\epsilon=0.095$")
except:
 _st_.goboom(_sage_const_189 )
_st_.blockend()
try:
 _st_.plot(_sage_const_2 , format='notprovided', _p_=plot_finite_well(shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_1p5 , _sage_const_p095 , _sage_const_0p0001 ), n=_sage_const_1 , title="Guess $\epsilon =0.095$"))
except:
 _st_.goboom(_sage_const_192 )
_st_.blockbegin()
try:
 plot_finite_well(shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_1p5 , _sage_const_p0975 , _sage_const_0p0001 ), \
                       n=_sage_const_1 , title="Guess $\epsilon=0.0975$")
except:
 _st_.goboom(_sage_const_199 )
_st_.blockend()
try:
 _st_.plot(_sage_const_3 , format='notprovided', _p_=plot_finite_well(shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_1p5 , _sage_const_p0975 , _sage_const_0p0001 ), n=_sage_const_1 , title="Guess $\epsilon =0.0975$"))
except:
 _st_.goboom(_sage_const_202 )
_st_.blockbegin()
try:
 plot_finite_well(shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_1p5 , _sage_const_p098 , _sage_const_0p0001 ), \
                       n=_sage_const_1 , title="Guess $\epsilon=0.098$")
except:
 _st_.goboom(_sage_const_209 )
_st_.blockend()
try:
 _st_.plot(_sage_const_4 , format='notprovided', _p_=plot_finite_well(shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_1p5 , _sage_const_p098 , _sage_const_0p0001 ), n=_sage_const_1 , title="Guess $\epsilon =0.098$"))
except:
 _st_.goboom(_sage_const_212 )
_st_.blockbegin()
try:
 plot_finite_well(shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_1p5 , _sage_const_p097993 , _sage_const_0p0001 ), \
                       n=_sage_const_1 , title="Ground Energy Eigenfunction")
except:
 _st_.goboom(_sage_const_219 )
_st_.blockend()
try:
 _st_.plot(_sage_const_5 , format='notprovided', _p_=plot_finite_well(shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_1p5 , _sage_const_p097993 , _sage_const_0p0001 ), n=_sage_const_1 , title="Ground Energy Eigenfunction"))
except:
 _st_.goboom(_sage_const_222 )
_st_.blockbegin()
try:
 plot_finite_well(shooting_solver_1d_finite(_sage_const_0 , _sage_const_1 , _sage_const_2 , _sage_const_p382605 , _sage_const_0p0001 ), \
                       n=_sage_const_2 , title="1st Excited Energy Eigenfunction")
except:
 _st_.goboom(_sage_const_250 )
_st_.blockend()
try:
 _st_.plot(_sage_const_6 , format='notprovided', _p_=plot_finite_well(shooting_solver_1d_finite(_sage_const_0 , _sage_const_1 , _sage_const_2 , _sage_const_p382605 , _sage_const_0p0001 ), n=_sage_const_2 , title="1st Excited Energy Eigenfunction"))
except:
 _st_.goboom(_sage_const_253 )
_st_.blockbegin()
try:
 plot_finite_well(shooting_solver_1d_finite(-_sage_const_1 , _sage_const_0 , _sage_const_2 , _sage_const_p80767 , _sage_const_0p0001 ), \
                       n=_sage_const_3 , title="2nd Excited Energy Eigenfunction")
except:
 _st_.goboom(_sage_const_262 )
_st_.blockend()
try:
 _st_.plot(_sage_const_7 , format='notprovided', _p_=plot_finite_well(shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_2 , _sage_const_p80767 , _sage_const_0p0001 ), n=_sage_const_3 , title="2nd Excited Energy Eigenfunction"))
except:
 _st_.goboom(_sage_const_265 )
_st_.blockbegin()
try:
 plot_finite_well(shooting_solver_1d_finite(-_sage_const_1 , _sage_const_0 , _sage_const_5 , _sage_const_3 , _sage_const_0p0001 ), \
                       n="unbound", title="Unbound Energy State")
except:
 _st_.goboom(_sage_const_297 )
_st_.blockend()
try:
 _st_.plot(_sage_const_8 , format='notprovided', _p_=plot_finite_well(shooting_solver_1d_finite(-_sage_const_1 , _sage_const_0 , _sage_const_5 , _sage_const_3 , _sage_const_0p0001 ), n="unbound", title="Unbound Energy State"))
except:
 _st_.goboom(_sage_const_300 )
_st_.blockbegin()
try:
 plot_finite_well(shooting_solver_1d_finite(-_sage_const_1 , _sage_const_0 , _sage_const_5 , _sage_const_3 , _sage_const_0p01 ), \
                       n="unbound", title="Energy gain due to low step size")
except:
 _st_.goboom(_sage_const_320 )
_st_.blockend()
try:
 _st_.plot(_sage_const_9 , format='notprovided', _p_=plot_finite_well(shooting_solver_1d_finite(-_sage_const_1 , _sage_const_0 , _sage_const_5 , _sage_const_3 , _sage_const_0p01 ), n="unbound", title="Energy gain due to low step size"))
except:
 _st_.goboom(_sage_const_323 )
_st_.blockbegin()
try:
 # 999 to approximate infinite potential
 V_potential = lambda u: _sage_const_999  if (abs(u) > _sage_const_1 /_sage_const_2 ) else _sage_const_0 
except:
 _st_.goboom(_sage_const_340 )
_st_.blockend()
_st_.blockbegin()
try:
 from numpy import arange
 def plot_inf_sq_eigenstate(n, uf, data, title, chained=False):
     if not chained: plt.clf()
     u = arange(-float(uf),float(uf),_sage_const_2 *float(uf)/_sage_const_100 )
     if n % _sage_const_2  != _sage_const_0 : #
         psi = [cos(i * pi) for i in u]
     else:
         psi = [cos(i * pi) for i in u]
     plt.plot(u, psi, label="Analytical Solution", marker='+', linestyle='None')
     plt.save = plt.savefig
     return plot_finite_well(data, n, title, True)
except:
 _st_.goboom(_sage_const_372 )
_st_.blockend()
_st_.blockbegin()
try:
 plot_inf_sq_eigenstate(_sage_const_1 , _sage_const_0p5 , shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_0p5 , _sage_const_p1542 , _sage_const_0p0001 ), \
                        title="Ground Energy Eigenfunction, $\infty$-quantum well")
except:
 _st_.goboom(_sage_const_380 )
_st_.blockend()
try:
 _st_.plot(_sage_const_10 , format='notprovided', _p_=plot_inf_sq_eigenstate(_sage_const_1 , _sage_const_0p5 , shooting_solver_1d_finite(_sage_const_1 , _sage_const_0 , _sage_const_0p5 , _sage_const_p1542 , _sage_const_0p0001 ), title="Ground Energy Eigenfunction, $\infty $-quantum well"))
except:
 _st_.goboom(_sage_const_383 )
_st_.blockbegin()
try:
 plot_inf_sq_eigenstate(_sage_const_2 , _sage_const_0p5 , shooting_solver_1d_finite(_sage_const_0 , _sage_const_1 , _sage_const_0p5 , _sage_const_0p6179 , _sage_const_0p0001 ), \
                        title="First Exctited Energy Eigenfunction, $\infty$-quantum well")
except:
 _st_.goboom(_sage_const_390 )
_st_.blockend()
try:
 _st_.plot(_sage_const_11 , format='notprovided', _p_=plot_inf_sq_eigenstate(_sage_const_2 , _sage_const_0p5 , shooting_solver_1d_finite(_sage_const_0 , _sage_const_1 , _sage_const_0p5 , _sage_const_0p6179 , _sage_const_0p0001 ), title="First Exctited Energy Eigenfunction, $\infty $-quantum well") )
except:
 _st_.goboom(_sage_const_394 )
_st_.blockbegin()
try:
 hbar = _sage_const_6p58211928 *_sage_const_10 **-_sage_const_16  # eV s
 C = _sage_const_1 
 m = _sage_const_1 
 
 omega = sqrt(C / m)
 x0 = sqrt(hbar / (m * omega))
 
 V_potential = lambda u: C * (u * x0)**_sage_const_2  / _sage_const_2 
 
 def shooting_solver_qho(psi0, dpsi0, uf, epsilon, delta_u):
     num_steps = (uf - _sage_const_0 ) / delta_u
     data = [(_sage_const_0 , psi0, dpsi0)];
     for i in range(num_steps):
         u_old = data[i][_sage_const_0 ]
         psi_old = data[i][_sage_const_1 ]
         dpsi_old = data[i][_sage_const_2 ]
         u = u_old + delta_u
         dpsi = dpsi_old - delta_u * (epsilon - u**_sage_const_2 ) * psi_old
         psi = psi_old + delta_u * dpsi_old
         data.append((u, psi, dpsi))
     return map(lambda x: (x[_sage_const_0 ], x[_sage_const_1 ]), data)
 
 def plot_data_qho(data, n, title):
     # mirror data based on parity, assumes eigenfunction
     # has a definite parity
     (u, psi0) = data[_sage_const_0 ]
     if psi0 == _sage_const_0 : # node at 0, odd
         data = map(lambda x: (-x[_sage_const_0 ], -x[_sage_const_1 ]), data)[::-_sage_const_1 ] + data
     else: # definite parity => anti-node at 0, even
         data = map(lambda x: (-x[_sage_const_0 ], x[_sage_const_1 ]), data)[::-_sage_const_1 ] + data
 
     u, psi = [[x[i] for x in data] for i in (_sage_const_0 ,_sage_const_1 )]
     fig = plt.figure()
     plt.plot(u, psi)
     plt.title(title)
     plt.xlabel('$u$')
     plt.ylabel("$\\psi_{%s}(u)$" % n)
     plt.axvline(x=_sage_const_0 , color='black')
     plt.grid(True)
 
     # plt.savefig
     # uncomment if plotting from sagetex
     plt.save = plt.savefig
     return plt
except:
 _st_.goboom(_sage_const_458 )
_st_.blockend()
_st_.blockbegin()
try:
 plot_data_qho(shooting_solver_qho(_sage_const_1 , _sage_const_0 , _sage_const_3p8 , _sage_const_1p00005 , _sage_const_0p0001 ), \
               n=_sage_const_1 , title="QHO Ground State")
except:
 _st_.goboom(_sage_const_467 )
_st_.blockend()
try:
 _st_.plot(_sage_const_12 , format='notprovided', _p_=plot_data_qho(shooting_solver_qho(_sage_const_1 , _sage_const_0 , _sage_const_3p9 , _sage_const_1p00005 , _sage_const_0p0001 ), n=_sage_const_1 , title="QHO Ground State"))
except:
 _st_.goboom(_sage_const_469 )
_st_.blockbegin()
try:
 plot_data_qho(shooting_solver_qho(_sage_const_0 , _sage_const_1 , _sage_const_3p9 , _sage_const_3 , _sage_const_0p0001 ), \
               n=_sage_const_2 , title="QHO First Excited State")
except:
 _st_.goboom(_sage_const_478 )
_st_.blockend()
try:
 _st_.plot(_sage_const_13 , format='notprovided', _p_=plot_data_qho(shooting_solver_qho(_sage_const_0 , _sage_const_1 , _sage_const_3p9 , _sage_const_3 , _sage_const_0p0001 ), n=_sage_const_2 , title="QHO First Excited"))
except:
 _st_.goboom(_sage_const_480 )
_st_.endofdoc()
